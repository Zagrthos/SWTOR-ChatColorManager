; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; Define some variables to use
#define MyAppName "SWTOR Chat Manager"
#define MyAppVersion "1.5.2"
#define MyAppPublisher "Zagrthos"
#define MyAppURL "https://github.com/Zagrthos/SWTOR-ChatColorManager"
#define MyAppSupportURL "https://github.com/Zagrthos/SWTOR-ChatColorManager/issues"
#define MyAppUpdateURL "https://github.com/Zagrthos/SWTOR-ChatColorManager/releases"
#define MyAppExeName "ChatManager.exe"
#define SetupVersion "1.5.2.0"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{375E2760-51D1-40D2-A6C6-D7F380E0CFB0}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppSupportURL}
AppUpdatesURL={#MyAppUpdateURL}
VersionInfoVersion={#SetupVersion}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
; Let the user decide if he wants to create an Icon or not
AllowNoIcons=yes
; Show install dir on ReadyToInstall Page
AlwaysShowDirOnReadyPage=yes
; Show Start Menu folder name on ReadyToInstall Page
AlwaysShowGroupOnReadyPage=yes
LicenseFile=C:\_InnoSetup\ChatManager\LICENSE.txt
; Let the user decide if it's installed in Programs or in LocalAppData
PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename=SWTOR-ChatManager-v{#MyAppVersion}
SetupIconFile=C:\_InnoSetup\ChatManager\Logo.ico
Compression=lzma2/max
LZMAUseSeparateProcess=yes
SolidCompression=yes
WizardStyle=modern
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
MinVersion=10.0

[Languages]
Name: de; MessagesFile: "compiler:Languages\German.isl"
Name: en; MessagesFile: "compiler:Default.isl"
Name: fr; MessagesFile: "compiler:Languages\French.isl"

[CustomMessages]
de.DotNet7Fail = Fehler bei der Installation von .NET 7
de.DotNet7DownloadFail = Fehler bei dem Download von .NET 7
de.DotNet7Install = .NET 7 wird installiert... 
de.DotNet7InstallDesc = Bitte warte während .NET 7 auf deinem System installiert wird... 
de.DotNet7Installing = Installiere .NET 7... 
de.DotNet7DownloadFailError = Fehler bei dem Download von .NET 7:
en.DotNet7Fail = Error while installing .NET 7
en.DotNet7DownloadFail = Error while downloading .NET 7
en.DotNet7Install = .NET 7 is being installed... 
en.DotNet7InstallDesc = Please wait while .NET 7 is being installed on your system... 
en.DotNet7Installing = Installing .NET 7... 
en.DotNet7DownloadFailError = Error while downloading .NET 7:
fr.DotNet7Fail = Erreur lors de l'installation de .NET 7
fr.DotNet7DownloadFail = Erreur lors du téléchargement de .NET 7
fr.DotNet7Install = .NET 7 est en cours d'installation... 
fr.DotNet7InstallDesc = Merci de patienter pendant l'installation de .NET 7 sur ton système... 
fr.DotNet7Installing = Installation de .NET 7... 
fr.DotNet7DownloadFailError = Erreur lors du téléchargement de .NET 7: 

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\_InnoSetup\ChatManagerExe\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\_InnoSetup\ChatManagerExe\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent unchecked

[InstallDelete]
Type: filesandordirs; Name: "{app}"

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
var
  DotNet7RuntimeInstaller: string;
  DownloadPage: TDownloadWizardPage;
  DotNet7InstallProgressPage: TOutputProgressWizardPage;

function CheckDotNetVersion: Boolean;
var
  ErrorCode: Integer;
  TempDir: String;
  BatchFilePath: String;
  OutputFilePath: String;
  Output: AnsiString;
begin
  Result := True;

  TempDir := ExpandConstant('{tmp}');
  BatchFilePath := TempDir + '\CheckDotNet.bat';
  OutputFilePath := TempDir + '\DotNetRuntimes.txt';

  SaveStringToFile(BatchFilePath, '@echo off' + #13#10 + 
    'dotnet --list-runtimes > ' + OutputFilePath, False);
  
  if Exec(ExpandConstant('{cmd}'), '/C ' + BatchFilePath, '', SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
  begin
    LoadStringFromFile(OutputFilePath, Output);
    if (Pos('Microsoft.WindowsDesktop.App 7.0.10', Output) = 0) then 
    begin
      Result := False;
    end;
  end;
end;

procedure InstallDotNet7();
var
  ResultCode: Integer;
begin
  if FileExists(DotNet7RuntimeInstaller) then
  begin
    if not Exec(DotNet7RuntimeInstaller, '/quiet /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      Log(Format('Failed to install .NET 7.0. Error code: %d', [ResultCode]));
      MsgBox(CustomMessage('DotNet7Fail'), mbError, MB_OK);
    end;
  end
  else
  begin
    Log(Format('Installer file does not exist: %s', [DotNet7RuntimeInstaller]));
    MsgBox(CustomMessage('DotNet7DownloadFail'), mbError, MB_OK);
  end;
end;

procedure InitializeWizard;
begin
  DotNet7RuntimeInstaller := ExpandConstant('{tmp}\dotnet7-installer.exe');
  DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), nil);
  DotNet7InstallProgressPage := CreateOutputProgressPage(CustomMessage('DotNet7Install'), CustomMessage('DotNet7InstallDesc'));
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = wpReady then begin
    if not CheckDotNetVersion then begin
      DownloadPage.Clear;
      DownloadPage.Add('https://download.visualstudio.microsoft.com/download/pr/747f4a98-2586-4bc6-b828-34f35e384a7d/44225cfd9d365855ec77d00c4812133c/windowsdesktop-runtime-7.0.10-win-x64.exe', 'dotnet7-installer.exe', '');
      DownloadPage.Show;
      try
        try
          DownloadPage.Download;
          DotNet7RuntimeInstaller := ExpandConstant('{tmp}\dotnet7-installer.exe');
          Log(Format('Downloaded .NET 7 installer to: %s', [DotNet7RuntimeInstaller]));
          DownloadPage.Hide;

          DotNet7InstallProgressPage.Show;
          DotNet7InstallProgressPage.SetText(CustomMessage('DotNet7Installing'), '');
          InstallDotNet7();
          DotNet7InstallProgressPage.Hide;

          Result := True;
        except
          Log(Format('Failed to download .NET 7 installer: %s', [GetExceptionMessage]));
          MsgBox(CustomMessage('DotNet7DownloadFailError') + GetExceptionMessage, mbError, MB_OK);
          Result := False;
        end;
      finally
        DownloadPage.Hide;
      end;
    end
    else
      Result := True;
  end else
    Result := True;
end;